//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpyClientConsole.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SaveScreenShotToDB", ReplyAction="http://tempuri.org/IClientService/SaveScreenShotToDBResponse")]
        bool SaveScreenShotToDB(SpyClientLibrary.ServiceReference.ClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SaveScreenShotToDB", ReplyAction="http://tempuri.org/IClientService/SaveScreenShotToDBResponse")]
        System.Threading.Tasks.Task<bool> SaveScreenShotToDBAsync(SpyClientLibrary.ServiceReference.ClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenFromDBResponse")]
        byte[] GetScreenFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenFromDBResponse")]
        System.Threading.Tasks.Task<byte[]> GetScreenFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenByIdFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenByIdFromDBResponse")]
        byte[] GetScreenByIdFromDB(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenByIdFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenByIdFromDBResponse")]
        System.Threading.Tasks.Task<byte[]> GetScreenByIdFromDBAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenCountFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenCountFromDBResponse")]
        int GetScreenCountFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenCountFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenCountFromDBResponse")]
        System.Threading.Tasks.Task<int> GetScreenCountFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPagesGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetPagesGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePagesGroup[] GetPagesGroupFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPagesGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetPagesGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePagesGroup[]> GetPagesGroupFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForGroupFromDB(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForGroupFromDBAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStationsGroup[] GetWorkstationsGroupFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStationsGroup[]> GetWorkstationsGroupFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsForGroupFromDB(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsForGroupFromDBAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePage", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageResponse")]
        bool AddAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePage", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageResponse")]
        System.Threading.Tasks.Task<bool> AddAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageForGroupResponse")]
        bool AddAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageForGroupResponse")]
        System.Threading.Tasks.Task<bool> AddAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeletePagesGroup", ReplyAction="http://tempuri.org/IClientService/DeletePagesGroupResponse")]
        bool DeletePagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeletePagesGroup", ReplyAction="http://tempuri.org/IClientService/DeletePagesGroupResponse")]
        System.Threading.Tasks.Task<bool> DeletePagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePage", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageResponse")]
        bool DeleteAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePage", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageResponse")]
        System.Threading.Tasks.Task<bool> DeleteAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageForGroupResponse")]
        bool DeleteAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageForGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : SpyClientConsole.ServiceReference.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<SpyClientConsole.ServiceReference.IClientService>, SpyClientConsole.ServiceReference.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SaveScreenShotToDB(SpyClientLibrary.ServiceReference.ClientRequest request) {
            return base.Channel.SaveScreenShotToDB(request);
        }
        
        public System.Threading.Tasks.Task<bool> SaveScreenShotToDBAsync(SpyClientLibrary.ServiceReference.ClientRequest request) {
            return base.Channel.SaveScreenShotToDBAsync(request);
        }
        
        public byte[] GetScreenFromDB() {
            return base.Channel.GetScreenFromDB();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetScreenFromDBAsync() {
            return base.Channel.GetScreenFromDBAsync();
        }
        
        public byte[] GetScreenByIdFromDB(int id) {
            return base.Channel.GetScreenByIdFromDB(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetScreenByIdFromDBAsync(int id) {
            return base.Channel.GetScreenByIdFromDBAsync(id);
        }
        
        public int GetScreenCountFromDB() {
            return base.Channel.GetScreenCountFromDB();
        }
        
        public System.Threading.Tasks.Task<int> GetScreenCountFromDBAsync() {
            return base.Channel.GetScreenCountFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePagesGroup[] GetPagesGroupFromDB() {
            return base.Channel.GetPagesGroupFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePagesGroup[]> GetPagesGroupFromDBAsync() {
            return base.Channel.GetPagesGroupFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageFromDB() {
            return base.Channel.GetAcceptablePageFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageFromDBAsync() {
            return base.Channel.GetAcceptablePageFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForGroupFromDB(int groupId) {
            return base.Channel.GetAcceptablePageForGroupFromDB(groupId);
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForGroupFromDBAsync(int groupId) {
            return base.Channel.GetAcceptablePageForGroupFromDBAsync(groupId);
        }
        
        public SpyClientLibrary.ServiceReference.WorkStationsGroup[] GetWorkstationsGroupFromDB() {
            return base.Channel.GetWorkstationsGroupFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStationsGroup[]> GetWorkstationsGroupFromDBAsync() {
            return base.Channel.GetWorkstationsGroupFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsFromDB() {
            return base.Channel.GetWorkstationsFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsFromDBAsync() {
            return base.Channel.GetWorkstationsFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsForGroupFromDB(int groupId) {
            return base.Channel.GetWorkstationsForGroupFromDB(groupId);
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsForGroupFromDBAsync(int groupId) {
            return base.Channel.GetWorkstationsForGroupFromDBAsync(groupId);
        }
        
        public bool AddAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.AddAcceptablePage(page);
        }
        
        public System.Threading.Tasks.Task<bool> AddAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.AddAcceptablePageAsync(page);
        }
        
        public bool AddAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddAcceptablePageForGroup(page, group);
        }
        
        public System.Threading.Tasks.Task<bool> AddAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddAcceptablePageForGroupAsync(page, group);
        }
        
        public bool DeletePagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeletePagesGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeletePagesGroupAsync(group);
        }
        
        public bool DeleteAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.DeleteAcceptablePage(page);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.DeleteAcceptablePageAsync(page);
        }
        
        public bool DeleteAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeleteAcceptablePageForGroup(page, group);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeleteAcceptablePageForGroupAsync(page, group);
        }
    }
}
