//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpyClientLibrary.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequest", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService.Messages")]
    [System.SerializableAttribute()]
    public partial class ClientRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] _dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime _scrrenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string _scrrenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string _usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] _data {
            get {
                return this._dataField;
            }
            set {
                if ((object.ReferenceEquals(this._dataField, value) != true)) {
                    this._dataField = value;
                    this.RaisePropertyChanged("_data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime _scrrenDate {
            get {
                return this._scrrenDateField;
            }
            set {
                if ((this._scrrenDateField.Equals(value) != true)) {
                    this._scrrenDateField = value;
                    this.RaisePropertyChanged("_scrrenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _scrrenName {
            get {
                return this._scrrenNameField;
            }
            set {
                if ((object.ReferenceEquals(this._scrrenNameField, value) != true)) {
                    this._scrrenNameField = value;
                    this.RaisePropertyChanged("_scrrenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _username {
            get {
                return this._usernameField;
            }
            set {
                if ((object.ReferenceEquals(this._usernameField, value) != true)) {
                    this._usernameField = value;
                    this.RaisePropertyChanged("_username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcceptablePagesGroup", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class AcceptablePagesGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AcceptablePagesGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ExamSession[] ExamSessionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.PagesForGroup[] PagesForGroupsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AcceptablePagesGroupId {
            get {
                return this.AcceptablePagesGroupIdField;
            }
            set {
                if ((this.AcceptablePagesGroupIdField.Equals(value) != true)) {
                    this.AcceptablePagesGroupIdField = value;
                    this.RaisePropertyChanged("AcceptablePagesGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ExamSession[] ExamSessions {
            get {
                return this.ExamSessionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamSessionsField, value) != true)) {
                    this.ExamSessionsField = value;
                    this.RaisePropertyChanged("ExamSessions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.PagesForGroup[] PagesForGroups {
            get {
                return this.PagesForGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.PagesForGroupsField, value) != true)) {
                    this.PagesForGroupsField = value;
                    this.RaisePropertyChanged("PagesForGroups");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExamSession", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class ExamSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.AcceptablePagesGroup AcceptablePagesGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AcceptablePagesGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExamSessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStationsGroup WorkStationsGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkStationsGroupIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.AcceptablePagesGroup AcceptablePagesGroup {
            get {
                return this.AcceptablePagesGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.AcceptablePagesGroupField, value) != true)) {
                    this.AcceptablePagesGroupField = value;
                    this.RaisePropertyChanged("AcceptablePagesGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AcceptablePagesGroupId {
            get {
                return this.AcceptablePagesGroupIdField;
            }
            set {
                if ((this.AcceptablePagesGroupIdField.Equals(value) != true)) {
                    this.AcceptablePagesGroupIdField = value;
                    this.RaisePropertyChanged("AcceptablePagesGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExamSessionId {
            get {
                return this.ExamSessionIdField;
            }
            set {
                if ((this.ExamSessionIdField.Equals(value) != true)) {
                    this.ExamSessionIdField = value;
                    this.RaisePropertyChanged("ExamSessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStationsGroup WorkStationsGroup {
            get {
                return this.WorkStationsGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationsGroupField, value) != true)) {
                    this.WorkStationsGroupField = value;
                    this.RaisePropertyChanged("WorkStationsGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkStationsGroupId {
            get {
                return this.WorkStationsGroupIdField;
            }
            set {
                if ((this.WorkStationsGroupIdField.Equals(value) != true)) {
                    this.WorkStationsGroupIdField = value;
                    this.RaisePropertyChanged("WorkStationsGroupId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagesForGroup", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class PagesForGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.AcceptablePage AcceptablePageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AcceptablePageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.AcceptablePagesGroup AcceptablePagesGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AcceptablePagesGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PagesForGroupIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.AcceptablePage AcceptablePage {
            get {
                return this.AcceptablePageField;
            }
            set {
                if ((object.ReferenceEquals(this.AcceptablePageField, value) != true)) {
                    this.AcceptablePageField = value;
                    this.RaisePropertyChanged("AcceptablePage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AcceptablePageId {
            get {
                return this.AcceptablePageIdField;
            }
            set {
                if ((this.AcceptablePageIdField.Equals(value) != true)) {
                    this.AcceptablePageIdField = value;
                    this.RaisePropertyChanged("AcceptablePageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.AcceptablePagesGroup AcceptablePagesGroup {
            get {
                return this.AcceptablePagesGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.AcceptablePagesGroupField, value) != true)) {
                    this.AcceptablePagesGroupField = value;
                    this.RaisePropertyChanged("AcceptablePagesGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AcceptablePagesGroupId {
            get {
                return this.AcceptablePagesGroupIdField;
            }
            set {
                if ((this.AcceptablePagesGroupIdField.Equals(value) != true)) {
                    this.AcceptablePagesGroupIdField = value;
                    this.RaisePropertyChanged("AcceptablePagesGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PagesForGroupId {
            get {
                return this.PagesForGroupIdField;
            }
            set {
                if ((this.PagesForGroupIdField.Equals(value) != true)) {
                    this.PagesForGroupIdField = value;
                    this.RaisePropertyChanged("PagesForGroupId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkStationsGroup", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class WorkStationsGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ExamSession[] ExamSessionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStationsForGroup[] WorkStationsForGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkStationsGroupIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ExamSession[] ExamSessions {
            get {
                return this.ExamSessionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExamSessionsField, value) != true)) {
                    this.ExamSessionsField = value;
                    this.RaisePropertyChanged("ExamSessions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStationsForGroup[] WorkStationsForGroups {
            get {
                return this.WorkStationsForGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationsForGroupsField, value) != true)) {
                    this.WorkStationsForGroupsField = value;
                    this.RaisePropertyChanged("WorkStationsForGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkStationsGroupId {
            get {
                return this.WorkStationsGroupIdField;
            }
            set {
                if ((this.WorkStationsGroupIdField.Equals(value) != true)) {
                    this.WorkStationsGroupIdField = value;
                    this.RaisePropertyChanged("WorkStationsGroupId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkStationsForGroup", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class WorkStationsForGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStation WorkStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkStationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkStationsForGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStationsGroup WorkStationsGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkStationsGroupIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStation WorkStation {
            get {
                return this.WorkStationField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationField, value) != true)) {
                    this.WorkStationField = value;
                    this.RaisePropertyChanged("WorkStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkStationId {
            get {
                return this.WorkStationIdField;
            }
            set {
                if ((this.WorkStationIdField.Equals(value) != true)) {
                    this.WorkStationIdField = value;
                    this.RaisePropertyChanged("WorkStationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkStationsForGroupId {
            get {
                return this.WorkStationsForGroupIdField;
            }
            set {
                if ((this.WorkStationsForGroupIdField.Equals(value) != true)) {
                    this.WorkStationsForGroupIdField = value;
                    this.RaisePropertyChanged("WorkStationsForGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStationsGroup WorkStationsGroup {
            get {
                return this.WorkStationsGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationsGroupField, value) != true)) {
                    this.WorkStationsGroupField = value;
                    this.RaisePropertyChanged("WorkStationsGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkStationsGroupId {
            get {
                return this.WorkStationsGroupIdField;
            }
            set {
                if ((this.WorkStationsGroupIdField.Equals(value) != true)) {
                    this.WorkStationsGroupIdField = value;
                    this.RaisePropertyChanged("WorkStationsGroupId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkStation", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class WorkStation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ClientUserForWorkstation[] ClientUserForWorkstationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.Room RoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoomIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ScreenShotsForWorkstation[] ScreenShotsForWorkstationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkStationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStationsForGroup[] WorkStationsForGroupsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ClientUserForWorkstation[] ClientUserForWorkstations {
            get {
                return this.ClientUserForWorkstationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientUserForWorkstationsField, value) != true)) {
                    this.ClientUserForWorkstationsField = value;
                    this.RaisePropertyChanged("ClientUserForWorkstations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.Room Room {
            get {
                return this.RoomField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomField, value) != true)) {
                    this.RoomField = value;
                    this.RaisePropertyChanged("Room");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoomId {
            get {
                return this.RoomIdField;
            }
            set {
                if ((this.RoomIdField.Equals(value) != true)) {
                    this.RoomIdField = value;
                    this.RaisePropertyChanged("RoomId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ScreenShotsForWorkstation[] ScreenShotsForWorkstations {
            get {
                return this.ScreenShotsForWorkstationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenShotsForWorkstationsField, value) != true)) {
                    this.ScreenShotsForWorkstationsField = value;
                    this.RaisePropertyChanged("ScreenShotsForWorkstations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkStationId {
            get {
                return this.WorkStationIdField;
            }
            set {
                if ((this.WorkStationIdField.Equals(value) != true)) {
                    this.WorkStationIdField = value;
                    this.RaisePropertyChanged("WorkStationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStationsForGroup[] WorkStationsForGroups {
            get {
                return this.WorkStationsForGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationsForGroupsField, value) != true)) {
                    this.WorkStationsForGroupsField = value;
                    this.RaisePropertyChanged("WorkStationsForGroups");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoomNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStation[] WorkStationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomId {
            get {
                return this.RoomIdField;
            }
            set {
                if ((this.RoomIdField.Equals(value) != true)) {
                    this.RoomIdField = value;
                    this.RaisePropertyChanged("RoomId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoomNumber {
            get {
                return this.RoomNumberField;
            }
            set {
                if ((this.RoomNumberField.Equals(value) != true)) {
                    this.RoomNumberField = value;
                    this.RaisePropertyChanged("RoomNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStation[] WorkStations {
            get {
                return this.WorkStationsField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationsField, value) != true)) {
                    this.WorkStationsField = value;
                    this.RaisePropertyChanged("WorkStations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientUserForWorkstation", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class ClientUserForWorkstation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ClientUser ClientUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientUserForWorkstationsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ClientUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LogOutDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LoginDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStation WorkStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkStationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ClientUser ClientUser {
            get {
                return this.ClientUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientUserField, value) != true)) {
                    this.ClientUserField = value;
                    this.RaisePropertyChanged("ClientUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientUserForWorkstationsId {
            get {
                return this.ClientUserForWorkstationsIdField;
            }
            set {
                if ((this.ClientUserForWorkstationsIdField.Equals(value) != true)) {
                    this.ClientUserForWorkstationsIdField = value;
                    this.RaisePropertyChanged("ClientUserForWorkstationsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ClientUserId {
            get {
                return this.ClientUserIdField;
            }
            set {
                if ((this.ClientUserIdField.Equals(value) != true)) {
                    this.ClientUserIdField = value;
                    this.RaisePropertyChanged("ClientUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LogOutDate {
            get {
                return this.LogOutDateField;
            }
            set {
                if ((this.LogOutDateField.Equals(value) != true)) {
                    this.LogOutDateField = value;
                    this.RaisePropertyChanged("LogOutDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LoginDate {
            get {
                return this.LoginDateField;
            }
            set {
                if ((this.LoginDateField.Equals(value) != true)) {
                    this.LoginDateField = value;
                    this.RaisePropertyChanged("LoginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStation WorkStation {
            get {
                return this.WorkStationField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationField, value) != true)) {
                    this.WorkStationField = value;
                    this.RaisePropertyChanged("WorkStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkStationId {
            get {
                return this.WorkStationIdField;
            }
            set {
                if ((this.WorkStationIdField.Equals(value) != true)) {
                    this.WorkStationIdField = value;
                    this.RaisePropertyChanged("WorkStationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreenShotsForWorkstation", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class ScreenShotsForWorkstation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ScreenShot ScreenShotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScreenShotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScreenShotsForWorkstationsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.WorkStation WorkStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkStationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ScreenShot ScreenShot {
            get {
                return this.ScreenShotField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenShotField, value) != true)) {
                    this.ScreenShotField = value;
                    this.RaisePropertyChanged("ScreenShot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ScreenShotId {
            get {
                return this.ScreenShotIdField;
            }
            set {
                if ((this.ScreenShotIdField.Equals(value) != true)) {
                    this.ScreenShotIdField = value;
                    this.RaisePropertyChanged("ScreenShotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScreenShotsForWorkstationsId {
            get {
                return this.ScreenShotsForWorkstationsIdField;
            }
            set {
                if ((this.ScreenShotsForWorkstationsIdField.Equals(value) != true)) {
                    this.ScreenShotsForWorkstationsIdField = value;
                    this.RaisePropertyChanged("ScreenShotsForWorkstationsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.WorkStation WorkStation {
            get {
                return this.WorkStationField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkStationField, value) != true)) {
                    this.WorkStationField = value;
                    this.RaisePropertyChanged("WorkStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkStationId {
            get {
                return this.WorkStationIdField;
            }
            set {
                if ((this.WorkStationIdField.Equals(value) != true)) {
                    this.WorkStationIdField = value;
                    this.RaisePropertyChanged("WorkStationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientUser", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class ClientUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ClientUserForWorkstation[] ClientUserForWorkstationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserSurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ClientUserForWorkstation[] ClientUserForWorkstations {
            get {
                return this.ClientUserForWorkstationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientUserForWorkstationsField, value) != true)) {
                    this.ClientUserForWorkstationsField = value;
                    this.RaisePropertyChanged("ClientUserForWorkstations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientUserId {
            get {
                return this.ClientUserIdField;
            }
            set {
                if ((this.ClientUserIdField.Equals(value) != true)) {
                    this.ClientUserIdField = value;
                    this.RaisePropertyChanged("ClientUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserLogin {
            get {
                return this.UserLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.UserLoginField, value) != true)) {
                    this.UserLoginField = value;
                    this.RaisePropertyChanged("UserLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserSurname {
            get {
                return this.UserSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserSurnameField, value) != true)) {
                    this.UserSurnameField = value;
                    this.RaisePropertyChanged("UserSurname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreenShot", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class ScreenShot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScreenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScreenShotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.ScreenShotsForWorkstation[] ScreenShotsForWorkstationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ScreenDate {
            get {
                return this.ScreenDateField;
            }
            set {
                if ((this.ScreenDateField.Equals(value) != true)) {
                    this.ScreenDateField = value;
                    this.RaisePropertyChanged("ScreenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScreenShotId {
            get {
                return this.ScreenShotIdField;
            }
            set {
                if ((this.ScreenShotIdField.Equals(value) != true)) {
                    this.ScreenShotIdField = value;
                    this.RaisePropertyChanged("ScreenShotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.ScreenShotsForWorkstation[] ScreenShotsForWorkstations {
            get {
                return this.ScreenShotsForWorkstationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenShotsForWorkstationsField, value) != true)) {
                    this.ScreenShotsForWorkstationsField = value;
                    this.RaisePropertyChanged("ScreenShotsForWorkstations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcceptablePage", Namespace="http://schemas.datacontract.org/2004/07/SpyWcfService")]
    [System.SerializableAttribute()]
    public partial class AcceptablePage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AcceptablePageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeadKeyWordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SpyClientLibrary.ServiceReference.PagesForGroup[] PagesForGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AcceptablePageId {
            get {
                return this.AcceptablePageIdField;
            }
            set {
                if ((this.AcceptablePageIdField.Equals(value) != true)) {
                    this.AcceptablePageIdField = value;
                    this.RaisePropertyChanged("AcceptablePageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeadKeyWords {
            get {
                return this.HeadKeyWordsField;
            }
            set {
                if ((object.ReferenceEquals(this.HeadKeyWordsField, value) != true)) {
                    this.HeadKeyWordsField = value;
                    this.RaisePropertyChanged("HeadKeyWords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SpyClientLibrary.ServiceReference.PagesForGroup[] PagesForGroups {
            get {
                return this.PagesForGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.PagesForGroupsField, value) != true)) {
                    this.PagesForGroupsField = value;
                    this.RaisePropertyChanged("PagesForGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SaveScreenShotToDB", ReplyAction="http://tempuri.org/IClientService/SaveScreenShotToDBResponse")]
        int SaveScreenShotToDB(SpyClientLibrary.ServiceReference.ClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SaveScreenShotToDB", ReplyAction="http://tempuri.org/IClientService/SaveScreenShotToDBResponse")]
        System.Threading.Tasks.Task<int> SaveScreenShotToDBAsync(SpyClientLibrary.ServiceReference.ClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenFromDBResponse")]
        byte[] GetScreenFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenFromDBResponse")]
        System.Threading.Tasks.Task<byte[]> GetScreenFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenByIdFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenByIdFromDBResponse")]
        byte[] GetScreenByIdFromDB(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenByIdFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenByIdFromDBResponse")]
        System.Threading.Tasks.Task<byte[]> GetScreenByIdFromDBAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenCountFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenCountFromDBResponse")]
        int GetScreenCountFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreenCountFromDB", ReplyAction="http://tempuri.org/IClientService/GetScreenCountFromDBResponse")]
        System.Threading.Tasks.Task<int> GetScreenCountFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateExamSession", ReplyAction="http://tempuri.org/IClientService/CreateExamSessionResponse")]
        int CreateExamSession(SpyClientLibrary.ServiceReference.AcceptablePagesGroup pagegorup, SpyClientLibrary.ServiceReference.WorkStationsGroup worksgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateExamSession", ReplyAction="http://tempuri.org/IClientService/CreateExamSessionResponse")]
        System.Threading.Tasks.Task<int> CreateExamSessionAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup pagegorup, SpyClientLibrary.ServiceReference.WorkStationsGroup worksgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPagesGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetPagesGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePagesGroup[] GetPagesGroupFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPagesGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetPagesGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePagesGroup[]> GetPagesGroupFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForGroupFromDB(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForGroupFromDBAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForExamFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForExamFromDBResponse")]
        SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForExamFromDB(int ExamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAcceptablePageForExamFromDB", ReplyAction="http://tempuri.org/IClientService/GetAcceptablePageForExamFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForExamFromDBAsync(int ExamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStationsGroup[] GetWorkstationsGroupFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStationsGroup[]> GetWorkstationsGroupFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsFromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsFromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDBResponse")]
        SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsForGroupFromDB(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDB", ReplyAction="http://tempuri.org/IClientService/GetWorkstationsForGroupFromDBResponse")]
        System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsForGroupFromDBAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddPagesGroup", ReplyAction="http://tempuri.org/IClientService/AddPagesGroupResponse")]
        bool AddPagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddPagesGroup", ReplyAction="http://tempuri.org/IClientService/AddPagesGroupResponse")]
        System.Threading.Tasks.Task<bool> AddPagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePage", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageResponse")]
        bool AddAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePage", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageResponse")]
        System.Threading.Tasks.Task<bool> AddAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageForGroupResponse")]
        bool AddAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/AddAcceptablePageForGroupResponse")]
        System.Threading.Tasks.Task<bool> AddAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstationsGroup", ReplyAction="http://tempuri.org/IClientService/AddWorkstationsGroupResponse")]
        bool AddWorkstationsGroup(SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstationsGroup", ReplyAction="http://tempuri.org/IClientService/AddWorkstationsGroupResponse")]
        System.Threading.Tasks.Task<bool> AddWorkstationsGroupAsync(SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstation", ReplyAction="http://tempuri.org/IClientService/AddWorkstationResponse")]
        bool AddWorkstation(SpyClientLibrary.ServiceReference.WorkStation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstation", ReplyAction="http://tempuri.org/IClientService/AddWorkstationResponse")]
        System.Threading.Tasks.Task<bool> AddWorkstationAsync(SpyClientLibrary.ServiceReference.WorkStation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstationForGroup", ReplyAction="http://tempuri.org/IClientService/AddWorkstationForGroupResponse")]
        bool AddWorkstationForGroup(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddWorkstationForGroup", ReplyAction="http://tempuri.org/IClientService/AddWorkstationForGroupResponse")]
        System.Threading.Tasks.Task<bool> AddWorkstationForGroupAsync(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeletePagesGroup", ReplyAction="http://tempuri.org/IClientService/DeletePagesGroupResponse")]
        bool DeletePagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeletePagesGroup", ReplyAction="http://tempuri.org/IClientService/DeletePagesGroupResponse")]
        System.Threading.Tasks.Task<bool> DeletePagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePage", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageResponse")]
        bool DeleteAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePage", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageResponse")]
        System.Threading.Tasks.Task<bool> DeleteAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageForGroupResponse")]
        bool DeleteAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteAcceptablePageForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteAcceptablePageForGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstationGroup", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationGroupResponse")]
        bool DeleteWorkstationGroup(SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstationGroup", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteWorkstationGroupAsync(SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstation", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationResponse")]
        bool DeleteWorkstation(SpyClientLibrary.ServiceReference.WorkStation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstation", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationResponse")]
        System.Threading.Tasks.Task<bool> DeleteWorkstationAsync(SpyClientLibrary.ServiceReference.WorkStation workstation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstationsForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationsForGroupResponse")]
        bool DeleteWorkstationsForGroup(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteWorkstationsForGroup", ReplyAction="http://tempuri.org/IClientService/DeleteWorkstationsForGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteWorkstationsForGroupAsync(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : SpyClientLibrary.ServiceReference.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<SpyClientLibrary.ServiceReference.IClientService>, SpyClientLibrary.ServiceReference.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SaveScreenShotToDB(SpyClientLibrary.ServiceReference.ClientRequest request) {
            return base.Channel.SaveScreenShotToDB(request);
        }
        
        public System.Threading.Tasks.Task<int> SaveScreenShotToDBAsync(SpyClientLibrary.ServiceReference.ClientRequest request) {
            return base.Channel.SaveScreenShotToDBAsync(request);
        }
        
        public byte[] GetScreenFromDB() {
            return base.Channel.GetScreenFromDB();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetScreenFromDBAsync() {
            return base.Channel.GetScreenFromDBAsync();
        }
        
        public byte[] GetScreenByIdFromDB(int id) {
            return base.Channel.GetScreenByIdFromDB(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetScreenByIdFromDBAsync(int id) {
            return base.Channel.GetScreenByIdFromDBAsync(id);
        }
        
        public int GetScreenCountFromDB() {
            return base.Channel.GetScreenCountFromDB();
        }
        
        public System.Threading.Tasks.Task<int> GetScreenCountFromDBAsync() {
            return base.Channel.GetScreenCountFromDBAsync();
        }
        
        public int CreateExamSession(SpyClientLibrary.ServiceReference.AcceptablePagesGroup pagegorup, SpyClientLibrary.ServiceReference.WorkStationsGroup worksgroup) {
            return base.Channel.CreateExamSession(pagegorup, worksgroup);
        }
        
        public System.Threading.Tasks.Task<int> CreateExamSessionAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup pagegorup, SpyClientLibrary.ServiceReference.WorkStationsGroup worksgroup) {
            return base.Channel.CreateExamSessionAsync(pagegorup, worksgroup);
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePagesGroup[] GetPagesGroupFromDB() {
            return base.Channel.GetPagesGroupFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePagesGroup[]> GetPagesGroupFromDBAsync() {
            return base.Channel.GetPagesGroupFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageFromDB() {
            return base.Channel.GetAcceptablePageFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageFromDBAsync() {
            return base.Channel.GetAcceptablePageFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForGroupFromDB(int groupId) {
            return base.Channel.GetAcceptablePageForGroupFromDB(groupId);
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForGroupFromDBAsync(int groupId) {
            return base.Channel.GetAcceptablePageForGroupFromDBAsync(groupId);
        }
        
        public SpyClientLibrary.ServiceReference.AcceptablePage[] GetAcceptablePageForExamFromDB(int ExamId) {
            return base.Channel.GetAcceptablePageForExamFromDB(ExamId);
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.AcceptablePage[]> GetAcceptablePageForExamFromDBAsync(int ExamId) {
            return base.Channel.GetAcceptablePageForExamFromDBAsync(ExamId);
        }
        
        public SpyClientLibrary.ServiceReference.WorkStationsGroup[] GetWorkstationsGroupFromDB() {
            return base.Channel.GetWorkstationsGroupFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStationsGroup[]> GetWorkstationsGroupFromDBAsync() {
            return base.Channel.GetWorkstationsGroupFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsFromDB() {
            return base.Channel.GetWorkstationsFromDB();
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsFromDBAsync() {
            return base.Channel.GetWorkstationsFromDBAsync();
        }
        
        public SpyClientLibrary.ServiceReference.WorkStation[] GetWorkstationsForGroupFromDB(int groupId) {
            return base.Channel.GetWorkstationsForGroupFromDB(groupId);
        }
        
        public System.Threading.Tasks.Task<SpyClientLibrary.ServiceReference.WorkStation[]> GetWorkstationsForGroupFromDBAsync(int groupId) {
            return base.Channel.GetWorkstationsForGroupFromDBAsync(groupId);
        }
        
        public bool AddPagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddPagesGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> AddPagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddPagesGroupAsync(group);
        }
        
        public bool AddAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.AddAcceptablePage(page);
        }
        
        public System.Threading.Tasks.Task<bool> AddAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.AddAcceptablePageAsync(page);
        }
        
        public bool AddAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddAcceptablePageForGroup(page, group);
        }
        
        public System.Threading.Tasks.Task<bool> AddAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.AddAcceptablePageForGroupAsync(page, group);
        }
        
        public bool AddWorkstationsGroup(SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.AddWorkstationsGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> AddWorkstationsGroupAsync(SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.AddWorkstationsGroupAsync(group);
        }
        
        public bool AddWorkstation(SpyClientLibrary.ServiceReference.WorkStation workstation) {
            return base.Channel.AddWorkstation(workstation);
        }
        
        public System.Threading.Tasks.Task<bool> AddWorkstationAsync(SpyClientLibrary.ServiceReference.WorkStation workstation) {
            return base.Channel.AddWorkstationAsync(workstation);
        }
        
        public bool AddWorkstationForGroup(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.AddWorkstationForGroup(workstation, group);
        }
        
        public System.Threading.Tasks.Task<bool> AddWorkstationForGroupAsync(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.AddWorkstationForGroupAsync(workstation, group);
        }
        
        public bool DeletePagesGroup(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeletePagesGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePagesGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeletePagesGroupAsync(group);
        }
        
        public bool DeleteAcceptablePage(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.DeleteAcceptablePage(page);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAcceptablePageAsync(SpyClientLibrary.ServiceReference.AcceptablePage page) {
            return base.Channel.DeleteAcceptablePageAsync(page);
        }
        
        public bool DeleteAcceptablePageForGroup(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeleteAcceptablePageForGroup(page, group);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAcceptablePageForGroupAsync(SpyClientLibrary.ServiceReference.AcceptablePage page, SpyClientLibrary.ServiceReference.AcceptablePagesGroup group) {
            return base.Channel.DeleteAcceptablePageForGroupAsync(page, group);
        }
        
        public bool DeleteWorkstationGroup(SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.DeleteWorkstationGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWorkstationGroupAsync(SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.DeleteWorkstationGroupAsync(group);
        }
        
        public bool DeleteWorkstation(SpyClientLibrary.ServiceReference.WorkStation workstation) {
            return base.Channel.DeleteWorkstation(workstation);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWorkstationAsync(SpyClientLibrary.ServiceReference.WorkStation workstation) {
            return base.Channel.DeleteWorkstationAsync(workstation);
        }
        
        public bool DeleteWorkstationsForGroup(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.DeleteWorkstationsForGroup(workstation, group);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWorkstationsForGroupAsync(SpyClientLibrary.ServiceReference.WorkStation workstation, SpyClientLibrary.ServiceReference.WorkStationsGroup group) {
            return base.Channel.DeleteWorkstationsForGroupAsync(workstation, group);
        }
    }
}
